return (function(T, ...) local TEXT = "This file was obfuscated using ALPHA Obfuscator 4.0.A | https://www.google.com/ & discord.gg"; 

local GetFEnv = ((getfenv) or (function(...) return (_ENV); end));
local Storage, _, Environment = ({}), (""), (GetFEnv(1));

local bit32 = ((Environment["\98\105\116"..T[486459838]..T[518787705]]) or (Environment[""..T.LjnXL0k0.."\105"..T['MeqhEOS']]) or ({})); 
local BitXOR = (((bit32) and (bit32[""..T.LjnXL0k0.."\120\111"..T["l86wNUvG"]])) or (function(A, B) local P, C = 1, 0; while ((A > 0) and (B > 0)) do local X, Y = A % 2, B % 2; if X ~= Y then C = C + P; end; A, B, P = (A - X) / 2, (B - Y) / 2, P * 2; end; if A < B then A = B; end; while A > 0 do local X = A % 2; if X > 0 then C = C + P; end; A, P =(A - X) / 2, P * 2; end; return (C); end));

local MOD = (2 ^ 32);
local MODM = (MOD - 1);
local BitSHL, BitSHR, BitAND;



local Byte = (_["\98\121"..T['MeqhEOS']..T[693465194]]);
local Character = (_[""..T[688667653].."\104"..T["MU4Gr3"]..T['l86wNUvG']]);
local SubString = (_["\115\117"..T['LjnXL0k0']]);
local GSub = (_[""..T[445021929]..T[725988877].."\117\98"]);



local Pairs = (Environment[""..T["B1btBA9v"].."\97\105"..T["l86wNUvG"].."\115"]);
local Type = (Environment["\116"..T[773852209].."\112\101"]);
local UnPack = ((Environment[""..T[758493785].."\110\112\97"..T[688667653].."\107"]) or (Environment[""..T['MeqhEOS'].."\97\98"..T[252614656]..T[693465194]][""..T[758493785].."\110"..T['B1btBA9v']..T['MU4Gr3']..T[688667653].."\107"]));
local SetMetaTable = (Environment[""..T[725988877]..T[693465194].."\116"..T['g20uwMmWef']..T[693465194]..T.MeqhEOS..T['MU4Gr3'].."\116"..T.MU4Gr3.."\98"..T[252614656].."\101"]);
local Floor = (Environment[""..T.g20uwMmWef..T['MU4Gr3']..T["MeqhEOS"].."\104"][""..T[748501378]..T[252614656]..T[360473431].."\111"..T.l86wNUvG]);
local RawSet = (Environment[""..T["l86wNUvG"].."\97"..T[137816845]..T[725988877].."\101\116"]);
local ToNumber = (Environment[""..T["MeqhEOS"]..T[360473431]..T[605001541]..T[758493785]..T.g20uwMmWef..T.LjnXL0k0..T[693465194]..T['l86wNUvG']]);
local LDExp = ((Environment[""..T.g20uwMmWef..T["MU4Gr3"].."\116"..T[257048617]][""..T[252614656]..T.ZMSXW7e..T[693465194]..T[392622517].."\112"]) or (function(Value, Exponent, ...) return ((Value * 2) ^ Exponent); end));
local Select = (Environment["\115"..T[693465194]..T[252614656].."\101\99\116"]);



local BitOR = (bit32["\98"..T[360473431].."\114"]) or (function(A, B, ...) return (MODM - BitAND(MODM - A, MODM - B)); end);
local BitNOT = (bit32[""..T['LjnXL0k0']..T[605001541].."\111"..T["MeqhEOS"]]) or (function(A, ...) return (MODM - A); end);
BitAND = (bit32[""..T["LjnXL0k0"]..T["MU4Gr3"]..T[605001541].."\100"]) or (function(A, B, ...) return (((A + B) - BitXOR(A, B)) / 2); end);
BitSHL = ((bit32["\108"..T[725988877].."\104"..T[901997543].."\102\116"]) or (function(A, B, ...) if (B < 0) then return (BitSHR(A, -(B))); end; return ((A * 2 ^ B) % 2 ^ 32); end));
BitSHR = ((bit32[""..T['l86wNUvG']..T[725988877]..T[257048617]..T[901997543].."\102\116"]) or (function(A, B, ...) if (B < 0) then return (BitSHL(A, -(B))); end; return (Floor(A % 2 ^ 32 / 2 ^ B)); end));

if ((not (Environment["\98"..T[901997543]..T["MeqhEOS"]..T[486459838].."\50"])) and (not (Environment[""..T.LjnXL0k0..T[901997543]..T.MeqhEOS]))) then

bit32["\98\111"..T["l86wNUvG"]] = BitOR;
bit32["\108"..T[725988877]..T[257048617]..T[901997543].."\102"..T['MeqhEOS']] = BitSHL;
bit32["\98"..T[605001541].."\111\116"] = BitNOT;
bit32["\98"..T[392622517].."\111\114"] = BitXOR;
bit32[""..T['LjnXL0k0']..T['MU4Gr3'].."\110"..T["ZMSXW7e"]] = BitAND;
bit32[""..T.l86wNUvG..T[725988877]..T[257048617]..T[901997543].."\102\116"] = BitSHR;

end;



local Create = (((Environment["\116\97\98\108"..T[693465194]]["\99"..T['l86wNUvG']..T[693465194]..T['MU4Gr3'].."\116\101"])) or ((function(Size, ...) return ({ UnPack({}, 0, Size); }); end)));
local Insert = (Environment["\116"..T.MU4Gr3.."\98\108\101"][""..T[901997543].."\110"..T[725988877]..T[693465194]..T["l86wNUvG"]..T.MeqhEOS]);
local Remove = (Environment[""..T["MeqhEOS"].."\97\98"..T[252614656].."\101"]["\114\101"..T['g20uwMmWef']..T[360473431].."\118\101"]);
local Concatenate = (Environment["\116\97\98"..T[252614656]..T[693465194]][""..T[688667653]..T[360473431].."\110\99\97"..T.MeqhEOS]); 

Environment["\98\105"..T["MeqhEOS"]..T[486459838]..T[518787705]] = bit32;

local PrimaryXORKey = (11);



local F = (#TEXT + 165); local G, Dictionary = ({}), ({}); for H = 0, F - 1 do local Value = Character(H); G[H] = Value; Dictionary[H] = Value; Dictionary[Value] = H; end;
local ByteString, Position = (function(ByteString) local X, Y, Z = Byte(ByteString, 1, 3); if ((X + Y + Z) ~= 248) then PrimaryXORKey = PrimaryXORKey + 91; F = F + 205; end; ByteString = SubString(ByteString, 5);  local C, D, E = (""), (""), ({}); local I = 1; local function K() local L = ToNumber(SubString(ByteString, I, I), 36); I = I + 1; local M = ToNumber(SubString(ByteString, I, I + L - 1), 36); I = I + L; return (M); end; C = Dictionary[K()]; E[1] = C; while (I < #ByteString) do local N = K(); if G[N] then D = G[N]; else D = C .. SubString(C, 1, 1); end; G[F] = C .. SubString(D, 1, 1); E[#E + 1], C, F = D, D, F + 1; end; return (Concatenate(E)); end)([==[PSU_BYTECODE]==]), (#TEXT - 90);local function CalculateVM(Index, Value, ...)if (Index == 836342865) then return ((BitXOR(((Value) - 787174) - 75805, 767408)) - 489293);elseif (Index == 544537163) then return (BitXOR(((Value) - 249406) - 929021, 209221));elseif (Index == 494864255) then return (BitXOR(BitXOR(BitXOR(BitXOR(Value, 749343), 158870), 465255), 144073));elseif (Index == 911526747) then return ((BitXOR((Value) - 747957, 680893)) - 775796);elseif (Index == 478997905) then return (BitXOR(((Value) - 546614) - 613381, 908516));elseif (Index == 397096919) then return (BitXOR(BitXOR(BitXOR(Value, 977984), 687478), 57597));elseif (Index == 163307033) then return (BitXOR(BitXOR(BitXOR(Value, 382520), 967589), 870023));elseif (Index == 77145955) then return (BitXOR((BitXOR(Value, 833635)) - 982001, 333502));else end; end;



local function gBits16() local W, X = Byte(ByteString, Position, Position + 2); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % 256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % 256; Position = Position + 2; return ((X * 256) + W); end;
local function gBits32() local W, X, Y, Z = Byte(ByteString, Position, Position + 3); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % 256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % 256; Y = BitXOR(Y, PrimaryXORKey); PrimaryXORKey = Y % 256; Z = BitXOR(Z, PrimaryXORKey); PrimaryXORKey = Z % 256; Position = Position + 4; return ((Z * 16777216) + (Y * 65536) + (X * 256) + W); end;
local function gBit(Bit, Start, End) if (End) then local R = (Bit / 2 ^ (Start - 1)) % 2 ^ ((End - 1) - (Start - 1) + 1); return (R - (R % 1)); else local P = 2 ^ (Start - 1); return (((Bit % (P + P) >= P) and (1)) or(0)); end; end;
local function gBits8() local F = BitXOR(Byte(ByteString, Position, Position), PrimaryXORKey); PrimaryXORKey = F % 256; Position = (Position + 1); return (F); end; 

local Mode = ""..T[84919280]; local function _R(...) return ({...}), Select(Mode, ...); end;





local function Deserialize(...) 
                    
	local Constants = ({});
	local Functions = ({});
	local Instructions = ({});  

            
	for Index = 0, gBits32(PrimaryXORKey) - 1, 1 do Functions[Index] = Deserialize(); end;

	local StackSize = gBits16(PrimaryXORKey);

	local ParameterCount = gBits8(PrimaryXORKey);
 

                            for Index = 0, gBits32(PrimaryXORKey) - 1, 1 do
                                local Type = gBits8(PrimaryXORKey);
		                        
                                if (Type == 16) then
			                        
                                    local Bool = gBits8(PrimaryXORKey);
                                    Constants[Index] = (Bool ~= 0);

		                        elseif (Type == 13) then

			                        while (true) do
                                        local Left = gBits32(PrimaryXORKey);
                                        local Right = gBits32(PrimaryXORKey);                                   
                                        local IsNormal = 1;
				                        local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
				                        local Exponent = gBit(Right, 21, 31);
				                        local Sign = ((-1) ^ gBit(Right, 32));
				                        if (Exponent == 0) then
					                        if (Mantissa == 0) then
                                                Constants[Index] = (Sign * 0);
						                        break;
					                        else
						                        Exponent = 1;
						                        IsNormal = 0;
					                        end;
				                        elseif(Exponent == 2047) then
                                            Constants[Index] = (Mantissa == 0) and (Sign * (1 / 0)) or (Sign * (0 / 0));
						                    break;
				                        end;
                                        Constants[Index] = LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
						                break;
			                        end;

		                        elseif (Type == 34) then
			                       
                                    while (true) do
                                        local Length = gBits32(PrimaryXORKey);			                        
                                        if (Length == 0) then Constants[Index] = (''); break; end;
				                       
                                        if (Length > 5000) then
                                            local Constant, ByteString = (''), (SubString(ByteString, Position, Position + Length - 1));
                                            Position = Position + Length;
                                            for Index = 1, #ByteString, 1 do local Byte = BitXOR(Byte(SubString(ByteString, Index, Index)), PrimaryXORKey); PrimaryXORKey = Byte % 256; Constant = Constant .. Dictionary[Byte]; end;
                                            Constants[Index] = Constant;
                                        else
                                            local Constant, Bytes = (''), ({Byte(ByteString, Position, Position + Length - 1)});
                                            Position = Position + Length;        
                                            for Index, Byte in Pairs(Bytes) do local Byte = BitXOR(Byte, PrimaryXORKey); PrimaryXORKey = Byte % 256; Constant = Constant .. Dictionary[Byte]; end;				                        
                                            Constants[Index] = Constant;
                                        end;

						                break;
			                        end;

                                else

                                   Constants[Index] = (nil);

		                        end;
	                        end;

                            local Count = gBits32(PrimaryXORKey); 
                            for Index = 0, Count - 1, 1 do Instructions[Index] = ({}); end;

                            for Index = 0, Count - 1, 1 do
                                local InstructionData = gBits8(PrimaryXORKey); 
                                if (InstructionData ~= 0) then 
                                    InstructionData = InstructionData - 1;
                                    local B, D, E, Enum, A, C = 0, 0, 0, 0, 0, 0;
                                    local InstructionType = gBit(InstructionData, 1, 3);
        
                            if (InstructionType == 1) then  Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); B = (gBits32(PrimaryXORKey)); elseif (InstructionType == 6) then  elseif (InstructionType == 0) then  Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); B = (gBits16(PrimaryXORKey)); elseif (InstructionType == 5) then  Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); B = (gBits32(PrimaryXORKey)); D = ({}); for Index = 1, C, 1 do D[Index] = ({[0] = gBits8(PrimaryXORKey), [1] = gBits16(PrimaryXORKey)}); end;  elseif (InstructionType == 3) then  Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); B = Instructions[(gBits32(PrimaryXORKey))]; elseif (InstructionType == 2) then  Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); B = Instructions[(gBits32(PrimaryXORKey))]; end; 

                            if (gBit(InstructionData, 6, 6) == 1) then C = Constants[C]; end; if (gBit(InstructionData, 5, 5) == 1) then B = Constants[B]; end; if (gBit(InstructionData, 8, 8) == 1) then E = Instructions[gBits32(PrimaryXORKey)]; else E = Instructions[Index + 1]; end; if (gBit(InstructionData, 4, 4) == 1) then A = Constants[A]; end;

                            if (gBit(InstructionData, 7, 7) == 1) then D = ({}); for Index = 1, gBits8(), 1 do D[Index] = gBits32(); end; end;

                            local Instruction = Instructions[Index];

                            Instruction["F3f3fsv"] = C; Instruction[-889271.1354491959] = Enum; Instruction[323005.2703174191] = B; Instruction['h5ENM5fcdw'] = D; Instruction["Sd6"] = E; Instruction[897640] = A; end; end;

    return ({

	['GWqIkgkF'] = 0;
	[-598725.0400531315] = Functions;
	["lBmy"] = ParameterCount;
	['bUqdA3tbPg'] = Constants;
	[49443] = Instructions;
	[70695] = StackSize;

    }); 

end; 




local function Wrap(Chunk, UpValues, Environment, ...)
                
    	local ParameterCount = Chunk['lBmy'];
	local Functions = Chunk[-598725.0400531315];
	local StackSize = Chunk[70695];
	local InitialInstructionPoint = 0;
	local Constants = Chunk['bUqdA3tbPg'];
	local Instructions = Chunk[49443];
	
	return (function(...)

        		local Top = -(1);
		local PCount = (Select(Mode, ...) - 1);
		local OP_B = 323005.2703174191;
		local lUpValues = ({});
		local OP_C = "F3f3fsv";
		local OP_ENUM = -889271.1354491959;
		local OP_A = 897640;
		local Arguments = {...};
		local OP_E = "Sd6";
		local OP_D = "h5ENM5fcdw";
		local Stack = {};
		local InstructionPoint = Instructions[InitialInstructionPoint];
		local VarArg = {};
		local DecryptConstants = (true);
		local VMKey = (277208678);

        for Index = 0, PCount, 1 do
			if (Index >= ParameterCount) then
				VarArg[Index - ParameterCount] = Arguments[Index + 1];
			else
				Stack[Index] = Arguments[Index + 1];
			end;
		end;

        local VarArgs = PCount - ParameterCount + 1;

        while (true) do
            local Instruction = InstructionPoint;	
			local Enum = Instruction[OP_ENUM];
            InstructionPoint = Instruction[OP_E];if (Enum <= 63) then if (Enum <= 31) then if (Enum <= 15) then if (Enum <= 7) then if (Enum <= 3) then if (Enum <= 1) then if (Enum == 0) then
local A = Instruction[OP_A]; local Results = ({ Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])) }); local Limit = Instruction[OP_C]; local K = 0; for I = A, Limit, 1 do K = K + 1; Stack[I] = Results[K]; end; for I = Limit + 1, StackSize do Stack[I] = nil; end;elseif (Enum <= 1) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]];end;elseif (Enum == 2) then
Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 3) then
local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;end;elseif (Enum <= 5) then if (Enum > 4) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 5) then

Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] / Stack[Instruction[OP_C]];end;elseif (Enum == 6) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 7) then
do return (Stack[Instruction[OP_A]]); end;end;elseif (Enum <= 11) then if (Enum <= 9) then if (Enum == 8) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 9) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](Stack[A + 1])); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 10) then
Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 11) then

Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 13) then if (Enum == 12) then
Stack[Instruction[OP_A]] = Instruction[OP_B] * Stack[Instruction[OP_C]];elseif (Enum <= 13) then
Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0);end;elseif (Enum > 14) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](Stack[A + 1])); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 15) then

Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = ({(nil)}); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(Instruction[OP_B]); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 23) then if (Enum <= 19) then if (Enum <= 17) then if (Enum > 16) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 17) then

Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 18) then
local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]];elseif (Enum < 19) then

Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 21) then if (Enum > 20) then
Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 21) then

Stack[Instruction[OP_A]] = Instruction[OP_B] / Instruction[OP_C];end;elseif (Enum > 22) then
local A = Instruction[OP_A]; local Step = Stack[A + 2]; local Index = Stack[A] + Step; Stack[A] = Index; if (Step > 0) then if (Index <= Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end; elseif (Index >= Stack[A+1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end;elseif (Enum < 23) then

Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 27) then if (Enum <= 25) then if (Enum > 24) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 25) then

local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;end;elseif (Enum == 26) then
do return; end;elseif (Enum <= 27) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] * Instruction[OP_C];end;elseif (Enum <= 29) then if (Enum > 28) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]];elseif (Enum < 29) then

local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 30) then
local A = Instruction[OP_A]; do return Stack[A](UnPack(Stack, A + 1, Top)) end;elseif (Enum <= 31) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](Stack[A + 1])); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 47) then if (Enum <= 39) then if (Enum <= 35) then if (Enum <= 33) then if (Enum == 32) then
if (Stack[Instruction[OP_A]] ~= Instruction[OP_C]) then InstructionPoint = Instruction[OP_B]; end;elseif (Enum <= 33) then
Stack[Instruction[OP_A]] = Create(Instruction[OP_B]);end;elseif (Enum > 34) then
Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 35) then

Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C];end;elseif (Enum <= 37) then if (Enum == 36) then
if (Stack[Instruction[OP_A]] > Instruction[OP_C]) then InstructionPoint = Instruction[OP_B]; end;elseif (Enum <= 37) then
Stack[Instruction[OP_A]](); Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 38) then
Environment[Instruction[OP_B]] = Stack[Instruction[OP_A]];elseif (Enum < 39) then

Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]];end;elseif (Enum <= 43) then if (Enum <= 41) then if (Enum > 40) then
local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 41) then

Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 42) then
local A = Instruction[OP_A]; local Results = { Stack[A](Stack[A + 1]); }; local Limit = Instruction[OP_C]; local K = 0; for I = A, Limit do K = K + 1; Stack[I] = Results[K]; end; for I = Limit + 1, StackSize do Stack[I] = nil; end;elseif (Enum <= 43) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 45) then if (Enum == 44) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 45) then
local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 46) then
Stack[Instruction[OP_A]] = Instruction[OP_B];elseif (Enum < 47) then

local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]];end;elseif (Enum <= 55) then if (Enum <= 51) then if (Enum <= 49) then if (Enum == 48) then
local A = Instruction[OP_A]; local Close = {}; for Index = 1, #lUpValues, 1 do local List = lUpValues[Index]; for Index = 0, #List, 1 do local UpValue = List[Index]; local oStack = UpValue[1]; local Position = UpValue[2]; if ((oStack == Stack) and (Position >= A)) then Close[Position] = oStack[Position]; UpValue[1] = Close; end; end; end;elseif (Enum <= 49) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] / Instruction[OP_C];end;elseif (Enum == 50) then
local A = Instruction[OP_A]; local Results = { Stack[A](UnPack(Stack, A + 1, Top)); }; local Limit = Instruction[OP_C]; local K = 0; for I = A, Limit do K = K + 1; Stack[I] = Results[K]; end; for I = Limit + 1, StackSize do Stack[I] = nil; end;elseif (Enum <= 51) then
Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]];end;elseif (Enum <= 53) then if (Enum > 52) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 53) then

InstructionPoint = Instruction[OP_B];end;elseif (Enum > 54) then
local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result;elseif (Enum < 55) then

UpValues[Instruction[OP_B]] = Stack[Instruction[OP_A]];end;elseif (Enum <= 59) then if (Enum <= 57) then if (Enum == 56) then
Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = ({(nil)}); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(Instruction[OP_B]); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 57) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 58) then
local Function = Functions[Instruction[OP_B]]; local fUpValues = Instruction[OP_D]; local Indexes = {}; local nUpValues = SetMetaTable({}, { __index = function(_, Key) local UpValue = Indexes[Key]; return (UpValue[1][UpValue[2]]); end, __newindex = function(_, Key, Value) local UpValue = Indexes[Key]; UpValue[1][UpValue[2]] = Value; end; }); for Index = 1, Instruction[OP_C], 1 do local UpValue = fUpValues[Index]; if (UpValue[0] == 0) then Indexes[Index - 1] = ({ Stack, UpValue[1] }); else Indexes[Index - 1] = ({ UpValues, UpValue[1] }); end; lUpValues[#lUpValues + 1] = Indexes; end; Stack[Instruction[OP_A]] = Wrap(Function, nUpValues, Environment);elseif (Enum <= 59) then
local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end;end;elseif (Enum <= 61) then if (Enum > 60) then
if (Stack[Instruction[OP_A]] >= Instruction[OP_C]) then InstructionPoint = Instruction[OP_B]; end;elseif (Enum < 61) then

Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 62) then
local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end;elseif (Enum < 63) then

local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end;end;elseif (Enum <= 95) then if (Enum <= 79) then if (Enum <= 71) then if (Enum <= 67) then if (Enum <= 65) then if (Enum == 64) then
Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 65) then
Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 66) then
local A = Instruction[OP_A]; Stack[A] = Stack[A]();elseif (Enum < 67) then

local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end;end;elseif (Enum <= 69) then if (Enum == 68) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 69) then
Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 70) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]];elseif (Enum < 71) then

if (Stack[Instruction[OP_A]] == Instruction[OP_C]) then InstructionPoint = Instruction[OP_B]; end;end;elseif (Enum <= 75) then if (Enum <= 73) then if (Enum == 72) then
local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 73) then
local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end;end;elseif (Enum == 74) then
Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 75) then
Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(Instruction[OP_B]); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 77) then if (Enum > 76) then
if (Stack[Instruction[OP_A]] == Stack[Instruction[OP_C]]) then InstructionPoint = Instruction[OP_B]; end;elseif (Enum < 77) then

Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 78) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 79) then
Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]];end;elseif (Enum <= 87) then if (Enum <= 83) then if (Enum <= 81) then if (Enum > 80) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 81) then

Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](Stack[A + 1])); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 82) then
if (Stack[Instruction[OP_A]]) then InstructionPoint = Instruction[OP_B]; end;elseif (Enum <= 83) then
Stack[Instruction[OP_A]] = -(Stack[Instruction[OP_B]]);end;elseif (Enum <= 85) then if (Enum == 84) then
for Index = Instruction[OP_A], Instruction[OP_B] do Stack[Index] = (nil); end;elseif (Enum <= 85) then
Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum == 86) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 87) then
Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 91) then if (Enum <= 89) then if (Enum > 88) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Instruction[OP_C];elseif (Enum < 89) then

local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 90) then
local A = Instruction[OP_A]; do return UnPack(Stack, A, Top); end;elseif (Enum < 91) then

Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Instruction[OP_C];end;elseif (Enum <= 93) then if (Enum == 92) then
Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 93) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](Stack[A + 1])); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 94) then
Environment[Instruction[OP_B]] = Stack[Instruction[OP_A]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Environment[Instruction[OP_B]] = Stack[Instruction[OP_A]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; for Index = Instruction[OP_A], Instruction[OP_B] do Stack[Index] = (nil); end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 95) then

Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 111) then if (Enum <= 103) then if (Enum <= 99) then if (Enum <= 97) then if (Enum > 96) then
Stack[Instruction[OP_A]] = Create(256); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Create(Instruction[OP_B]); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 97) then

Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 98) then
Environment[Instruction[OP_B]] = Stack[Instruction[OP_A]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Environment[Instruction[OP_B]] = Stack[Instruction[OP_A]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; for Index = Instruction[OP_A], Instruction[OP_B] do Stack[Index] = (nil); end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 99) then

Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]];end;elseif (Enum <= 101) then if (Enum > 100) then
Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 101) then

if (not (Stack[Instruction[OP_A]])) then InstructionPoint = Instruction[OP_B]; end;end;elseif (Enum == 102) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](Stack[A + 1])); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 103) then
if (Stack[Instruction[OP_A]] ~= Stack[Instruction[OP_C]]) then InstructionPoint = Instruction[OP_B]; end;end;elseif (Enum <= 107) then if (Enum <= 105) then if (Enum == 104) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](Stack[A + 1])); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 105) then
local A = Instruction[OP_A]; local C = Instruction[OP_C]; local D = A + 2; local Result = ({ Stack[A](Stack[A + 1], Stack[D]); }); for Index = 1, C do Stack[D + Index] = Result[Index]; end; local R = Result[1]; if (R) then Stack[D] = R; InstructionPoint = Instruction[OP_B]; end;end;elseif (Enum > 106) then
local A = Instruction[OP_A]; Top = A + VarArgs - 1; for Index = 0, VarArgs do Stack[A + Index] = VarArg[Index]; end; for I = Top + 1, StackSize do Stack[I] = nil; end;elseif (Enum < 107) then

Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]];end;elseif (Enum <= 109) then if (Enum == 108) then
Stack[Instruction[OP_A]] = (not (Stack[Instruction[OP_B]]));elseif (Enum <= 109) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] - Stack[Instruction[OP_C]];end;elseif (Enum == 110) then
Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 111) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] * Stack[Instruction[OP_C]];end;elseif (Enum <= 119) then if (Enum <= 115) then if (Enum <= 113) then if (Enum == 112) then
local A = Instruction[OP_A]; local B = Instruction[OP_B]; local Offset = 50 * (Instruction[OP_C] - 1); local T = Stack[A]; local Count = 0; for Index = A + 1, B do T[Offset + Count + 1] = Stack[A + (Index - A)]; Count = Count + 1; end;elseif (Enum <= 113) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 114) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 115) then

Stack[Instruction[OP_A]]();end;elseif (Enum <= 117) then if (Enum == 116) then
elseif (Enum <= 117) then
local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](Stack[A + 1])); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end;end;elseif (Enum == 118) then
Stack[Instruction[OP_A]] = Create(256);elseif (Enum <= 119) then
if (Instruction[OP_A] >= Stack[Instruction[OP_C]]) then InstructionPoint = Instruction[OP_B]; end;end;elseif (Enum <= 123) then if (Enum <= 121) then if (Enum == 120) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]] + Stack[Instruction[OP_C]];elseif (Enum <= 121) then
Stack[Instruction[OP_A]] = ({(nil)});end;elseif (Enum == 122) then
Stack[Instruction[OP_A]] = Wrap(Functions[Instruction[OP_B]], (nil), Environment);elseif (Enum <= 123) then
Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 125) then if (Enum == 124) then
Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 125) then
Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 126) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](Stack[A + 1])); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum > 127) then
local A = Instruction[OP_A]; Top = A + VarArgs - 1; for Index = 0, VarArgs do Stack[A + Index] = VarArg[Index]; end; for I = Top + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; do return Stack[A](UnPack(Stack, A + 1, Top)) end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; do return UnPack(Stack, A, Top); end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 128) then

local A = Instruction[OP_A]; Stack[A] = 0 + (Stack[A]); Stack[A + 1] = 0 + (Stack[A + 1]); Stack[A + 2] = 0 + (Stack[A + 2]); local Index = Stack[A]; local Step = Stack[A + 2]; if (Step > 0) then if (Index > Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end; elseif (Index < Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end;end;

                    end;
                end);
            end;	

            

            return Wrap(Deserialize(), {}, GetFEnv())(...); 
end)(...);